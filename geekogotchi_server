#!/usr/bin/env python
import dbus, dbus.service
import gobject
from dbus.mainloop.glib import DBusGMainLoop
from dbus.service import FallbackObject as DBusFBObject
from random import randint
from math import ceil
import os, pickle
import time
import signal

DBUS_PATH_SERVER='/org/shr/Geekogotchi/Server'
DBUS_IF_SERVER='org.shr.Geekogotchi.Server'
DBUS_PATH_PETS='/org/shr/Geekogotchi/Pets'
DBUS_PATH_PET='/org/shr/Geekogotchi/Pet'
DBUS_IF_PET='org.shr.Geekogotchi.Pet'
DBUS_IF_PETS='org.shr.Geekogotchi.Pets'

PERSIST_DATA='/usr/share/geekogotchi/pets.pickle'

UPDATE_INTERVAL = 1

VERSION = '0.0.0.0.1'

class Server(DBusFBObject):

  def __init__(self):
    DBusFBObject.__init__( self, conn=bus, object_path=DBUS_PATH_SERVER )
    self.pets = Pets()

  def start(self):
    self.pets.start()

  def stop(self):
    self.pets.store()

  def update(self):
    self.pets.update()
    return True

  @dbus.service.method(DBUS_IF_SERVER, "", "s")
  def GetVersion(self):
    return VERSION

class Pets(DBusFBObject):

  pets = None

  def __init__(self):
    DBusFBObject.__init__( self, conn=bus, object_path=DBUS_PATH_PETS )
    self.pets = {}
    self.petcount = -1
    if os.path.exists(PERSIST_DATA):
      pickleFile = open(PERSIST_DATA, "r")
      self.petcount, petprops = pickle.load(pickleFile)
      for pet in petprops:
        self.pets[pet]= Pet(pet, petprops[pet])

  def start(self):
    for pet in self.pets:
      if not self.pets[pet].props['Dead']:
        gobject.timeout_add_seconds(UPDATE_INTERVAL, self.pets[pet].update)

  def update(self):
    for pet in self.pets:
      self.pets[pet].update()

  def store(self):
    print "storing"
    pickleFile = open(PERSIST_DATA, "w")
    petprops = {}
    for pet in self.pets:
      petprops[pet] = (self.pets[pet].props, self.pets[pet].privprops)
    pickle.dump((self.petcount, petprops),pickleFile)
    pickleFile.close()

  @dbus.service.method(DBUS_IF_PETS, "", "i")
  def AddPet(self):
    self.petcount += 1
    self.pets[self.petcount] = Pet(self.petcount)
    self.pets[self.petcount].update()
    gobject.timeout_add_seconds(UPDATE_INTERVAL, self.pets[self.petcount].update)
    return self.petcount

  @dbus.service.method(DBUS_IF_PETS, "i", "")
  def KillPet(self, id):
    self.pets[id].kill()
    del self.pets[id]

  @dbus.service.method(DBUS_IF_PETS, "", "ai")
  def GetPets(self):
    pets = []
    for pet in self.pets:
      pets.append(pet)
    return pets

class Pet(DBusFBObject):

  id = None
  pets = None
  props = None

  def __init__(self, id, props = None):
    self.id = id
    DBusFBObject.__init__( self, conn=bus, object_path=DBUS_PATH_PET+'/'+str(self.id) )
    if not props:
      self.props = {'Alive': True, 'Age':-1, 'Dead': False, 'Borned':False}
      self.privprops = {}
      self.privprops['MaxHHH']=randint(400, 600)
      self.privprops['MaxAge']=randint(60, 110)
      self.privprops['HHHStep']=randint(3,4)
      self.privprops['DeadLimit']=randint(-15, -5)

      self.privprops['LastUpdate']=time.time()

      self.privprops['Happiness']=self.privprops['MaxHHH']
      self.privprops['Hungriness']=0
      self.privprops['Health']=self.privprops['MaxHHH']
    else:
      self.props = props[0]
      self.privprops = props[1]
      self.update()

  def calculateHHH(self):
    #TODO: less than 0. higher than max
    try:
      self.props['Happiness']=(100*self.privprops['Happiness'])/self.privprops['MaxHHH']
      self.props['Hungriness']=(100*self.privprops['Hungriness'])/self.privprops['MaxHHH']
      self.props['Health']=(100*self.privprops['Health'])/self.privprops['MaxHHH']
    except KeyError:
      pass

  def update(self):
    print "update " + str(self.id)
    diff = time.time()-self.privprops['LastUpdate']
    if self.props['Alive']:
      if diff>(UPDATE_INTERVAL):
        num = int(ceil(diff))
        for i in range(1, num-1):
          self.calculate()
      return self.calculate()

  def calculate(self):
    print "calculate " + str(self.id)
    self.privprops['LastUpdate']=time.time()
    if not self.props['Borned'] and self.props['Age']==0:
      self.born()
    elif self.props['Alive']:
      self.props['Age'] += 1
      step = self.privprops['HHHStep']
      if self.props['Borned']:
        self.privprops['Happiness'] -= step
        self.privprops['Hungriness'] += step
        self.privprops['Health'] -= step
      self.calculateHHH()
      self.StateUpdated(self.props)
      if self.props['Age']>=self.privprops['MaxAge']:
        self.kill('age')
        return False
      if self.privprops['Happiness']<self.privprops['DeadLimit']:
        self.kill('boredom')
        return False
      if self.privprops['Health']<self.privprops['DeadLimit']:
        self.kill('illness')
        return False
      if self.privprops['Hungriness']>self.privprops['MaxHHH']-self.privprops['DeadLimit']:
        self.kill('hungry')
        return False

    return True

  def born(self):
    self.props['Borned']=True
    self.privprops['Happiness']=(randint(20, 40)*self.privprops['MaxHHH'])/100
    self.privprops['Hungriness']=(randint(0, 10)*self.privprops['MaxHHH'])/100
    self.privprops['Health']=(randint(90, 100)*self.privprops['MaxHHH'])/100
    self.calculateHHH()
    self.PetBorned()
    self.StateUpdated(self.props)

  def kill(self, reason = 'killed'):
    if self.props['Borned']:
      del self.props['Happiness']
      del self.props['Hungriness']
      del self.props['Health']
    self.props['Alive'] = False
    self.props['Dead'] = True
    self.StateUpdated(self.props)
    self.PetDeath(reason)

  @dbus.service.signal(DBUS_IF_PET, "a{sv}")
  def StateUpdated(self, props):
    pass

  @dbus.service.signal(DBUS_IF_PET, "")
  def PetBorned(self):
    pass

  @dbus.service.signal(DBUS_IF_PET, "s")
  def PetDeath(self, cause):
    pass

  @dbus.service.method(DBUS_IF_PET, "", "av")
  def GetState(self):
    return self.props

  @dbus.service.method(DBUS_IF_PET, "", "s")
  def GetName(self):
    return self.props.get('Name')

  @dbus.service.method(DBUS_IF_PET, "s", "")
  def SetName(self, name):
    self.props['Name'] = name

DBusGMainLoop(set_as_default=True)
mainloop = gobject.MainLoop()
bus = dbus.SystemBus()
try:
    busname = dbus.service.BusName( 'org.shr.Geekogotchi', bus )
except dbus.DBusException:
    print( "Can't claim dbus bus name, check configuration in /etc/dbus-1/system.d/geekogotchi.conf" )
    exit(1)

server = Server()
server.start()
signal.signal(signal.SIGTERM, server.stop)
try:
  mainloop.run()
except KeyboardInterrupt:
  server.stop()
  mainloop.quit()
