#!/usr/bin/env python
import dbus, dbus.service
import gobject
from dbus.mainloop.glib import DBusGMainLoop
from dbus.service import FallbackObject as DBusFBObject
from random import randint
import os, pickle
import signal

DBUS_PATH_SERVER='/org/shr/Geekogotchi/Server'
DBUS_IF_SERVER='org.shr.Geekogotchi.Server'
DBUS_PATH_PETS='/org/shr/Geekogotchi/Pets'
DBUS_PATH_PET='/org/shr/Geekogotchi/Pet'
DBUS_IF_PET='org.shr.Geekogotchi.Pet'
DBUS_IF_PETS='org.shr.Geekogotchi.Pets'

PERSIST_DATA='/usr/share/geekogotchi/pets.pickle'

UPDATE_INTERVAL = 5

VERSION = '0.0.0.0.1'

class Server(DBusFBObject):

  def __init__(self):
    DBusFBObject.__init__( self, conn=bus, object_path=DBUS_PATH_SERVER )
    self.pets = Pets()

  def start(self):
    self.pets.start()

  def stop(self):
    self.pets.store()

  def update(self):
    self.pets.update()
    return True

  @dbus.service.method(DBUS_IF_SERVER, "", "s")
  def GetVersion(self):
    return VERSION

class Pets(DBusFBObject):

  pets = None

  def __init__(self):
    DBusFBObject.__init__( self, conn=bus, object_path=DBUS_PATH_PETS )
    self.pets = {}
    self.petcount = -1
    if os.path.exists(PERSIST_DATA):
      pickleFile = open(PERSIST_DATA, "r")
      self.petcount, petprops = pickle.load(pickleFile)
      for pet in petprops:
        self.pets[pet]= Pet(pet, petprops[pet])

  def start(self):
    for pet in self.pets:
      if not self.pets[pet].props['Dead']:
        print self.pets[pet].props['Dead']
        gobject.timeout_add_seconds(UPDATE_INTERVAL, self.pets[pet].update)

  def update(self):
    for pet in self.pets:
      self.pets[pet].update()

  def store(self):
    print "storing"
    pickleFile = open(PERSIST_DATA, "w")
    petprops = {}
    for pet in self.pets:
      petprops[pet] = self.pets[pet].props
    pickle.dump((self.petcount, petprops),pickleFile)
    pickleFile.close()

  @dbus.service.method(DBUS_IF_PETS, "", "i")
  def AddPet(self):
    self.petcount += 1
    self.pets[self.petcount] = Pet(self.petcount)
    self.pets[self.petcount].update()
    gobject.timeout_add_seconds(UPDATE_INTERVAL, self.pets[self.petcount].update)
    return self.petcount

  @dbus.service.method(DBUS_IF_PETS, "i", "")
  def KillPet(self, id):
    self.pets[id].kill()
    del self.pets[id]

  @dbus.service.method(DBUS_IF_PETS, "", "ai")
  def GetPets(self):
    pets = []
    for pet in self.pets:
      pets.append(pet)
    return pets

class Pet(DBusFBObject):

  id = None
  pets = None
  props = None

  def __init__(self, id, props = None):
    self.id = id
    DBusFBObject.__init__( self, conn=bus, object_path=DBUS_PATH_PET+'/'+str(self.id) )
    if not props:
      self.props = {'Name': 'Tux', 'Alive': True, 'Age':-1, 'Dead': False, 'Borned':False}
    else:
      self.props = props
      self.update()

  def update(self):
    print "update " + str(self.id)
    if not self.props['Borned'] and self.props['Age']==0:
      self.born()
    elif self.props['Alive']:
      self.props['Age'] += 1
      self.StateUpdated(self.props)
      if self.props['Age']>=100:
        self.kill('age')
        return False
    return True

  def born(self):
    self.props['Borned']=True
    self.props['Happiness']=randint(20, 40)
    self.props['Hungriness']=randint(0, 10)
    self.props['Health']=randint(90, 100)
    self.PetBorned()
    self.StateUpdated(self.props)

  def kill(self, reason = 'killed'):
    if self.props['Borned']:
      del self.props['Happiness']
      del self.props['Hungriness']
      del self.props['Health']
    self.props['Alive'] = False
    self.props['Dead'] = True
    self.StateUpdated(self.props)
    self.PetDeath(reason)

  @dbus.service.signal(DBUS_IF_PET, "a{sv}")
  def StateUpdated(self, props):
    pass

  @dbus.service.signal(DBUS_IF_PET, "")
  def PetBorned(self):
    pass

  @dbus.service.signal(DBUS_IF_PET, "s")
  def PetDeath(self, cause):
    pass

  @dbus.service.method(DBUS_IF_PET, "", "s")
  def GetName(self):
    return self.name

DBusGMainLoop(set_as_default=True)
mainloop = gobject.MainLoop()
bus = dbus.SystemBus()
try:
    busname = dbus.service.BusName( 'org.shr.Geekogotchi', bus )
except dbus.DBusException:
    print( "Can't claim dbus bus name, check configuration in /etc/dbus-1/system.d/geekogotchi.conf" )
    exit(1)

server = Server()
server.start()
signal.signal(signal.SIGTERM, server.stop)
try:
  mainloop.run()
except KeyboardInterrupt:
  server.stop()
  mainloop.quit()
